@model EmbedViewerModel


@if (@Model.ShowExportButton)
{
    <input type="button" value="Export" id="export-embed" discord-embed-group-id="@Model.Id" class="btn btn-primary my-1 mr-3" style="display: inline" />
}
@if (@Model.ShowImportButton)
{
    <div style="display: inline">
        <input type="file" id="import-embed-ghost" discord-embed-group-id="@Model.Id" class="display-none" />
        <input type="button" value="Import" id="import-embed" discord-embed-group-id="@Model.Id" class="btn btn-primary my-1 mr-3 d-inline" style="display: inline" />
    </div>
}

<div class="discord-embed discord-embed-message" discord-embed-group-id="@Model.Id">
    <div class="discord-embed-content">
        <div class="discord-embed-author">
            <img class="discord-embed-author-img" discord-embed-group-id="@Model.Id" discord-embed-field="author-img" />
            <span discord-embed-group-id="@Model.Id" discord-embed-field="author-text"></span>
        </div>
        <div class="discord-embed-title" discord-embed-group-id="@Model.Id" discord-embed-field="title"></div>
        <div class="discord-embed-description" discord-embed-group-id="@Model.Id" discord-embed-field="description"></div>
        <div class="discord-embed-image">
            <img discord-embed-group-id="@Model.Id" discord-embed-field="image" />
        </div>
        <div class="discord-embed-footer">
            <img class="discord-embed-footer-img" discord-embed-group-id="@Model.Id" discord-embed-field="footer-img" />
            <span discord-embed-group-id="@Model.Id" discord-embed-field="footer-text"></span>
        </div>
    </div>
    <div class="discord-embed-thumbnail">
        <img discord-embed-group-id="@Model.Id" discord-embed-field="thumbnail" />
    </div>
</div>

<style>
    .discord-embed {
        font-size: 16px;
        color: #fff;
    }
    .discord-embed-message {
        padding: 16px;
        border-radius: 4px;
        background: #36393f;
        box-shadow: 0px 4px 8px rgba(0,0,0,.3);
        border-left: 4px solid;
        border-left-color: currentcolor;
        display: flex;
        align-items: flex-start;
        margin-top: 8px;
    }
    .discord-embed-footer {
        align-items: center;
        color: #dcddde;
        display: flex;
        font-size: 12px;
        line-height: 16px;
        font-weight: 500;
        grid-column: 1/3;
        grid-row: auto/auto;
        margin-top: 8px;
        word-break: break-all;
        overflow: hidden;
    }
    .discord-embed-footer-img {
        border-radius: 50%;
        flex-shrink: 0;
        height: 20px;
        margin-right: 8px;
        width: 20px;
        display: block;
        
        max-width: 100%;
    }
    .discord-embed-thumbnail {
        margin-left: auto;
        padding-left: 16px;
        
        width: 64px;
        height: 64px;
        overflow: hidden;
        border-radius: 4px;
        flex-shrink: 0;
    }
    .discord-embed-thumbnail img {
        max-width: 100%;
        height: auto;
        object-fit: cover;
        object-position: center;
        display: block;
        border-radius: 4px;
    }
    .discord-embed-author {
        display: flex;
        align-items: center;
        font-size: 14px;
    }
    .discord-embed-author-img {
        border-radius: 50%;
        height: 24px;
        margin-right: 8px;
        width: 24px;
        max-width: 100%;
    }
    .discord-embed-title {
        font-weight: 500;
        word-break: break-word;
    }
    .discord-embed-description {
        margin-top: 16px;
        color: #ddd;
        font-size: 14px;
        word-break: break-word;
    }
    .discord-embed-image {
        width: 100%;
        border-radius: 4px;
        overflow: hidden;
        margin-top: 8px;
    }
    .discord-embed-image img {
        width: 100%;
        display: block;
    }
</style>

<script type="text/javascript">
const targetEmbedId = "@Model.Id";
var updateFunctionList = []
function stringReplace(content, itemType)
{
    let replaceMap = {
        "userId": "1067393803427790929",
        "guildId": "832410110960730112",
        "username": "xenia#3312",
        "mention": "<@@1067393803427790929>",
        "guildName": "Guild Name"
    }
    switch (itemType)
    {
        case "title":
        case "description":
        case "footer-text":
        case "author-text":
            let c = content
            for (let pair of Object.entries(replaceMap))
            {
                c = c.replaceAll(`{${pair[0]}}`, pair[1])
            }
            return c;
        default:
            return content;
    }
}
const allowedDataKeys = [
    'title',
    'description',
    'image',
    'thumbnail',
    'footer-text',
    'footer-img',
    'author-text',
    'author-img',
    'color'   
]
function downloadFile(content, fileName){
    let blobContent = new Blob([content], {type: 'text/plain'})
    const aElement = document.createElement('a');
    aElement.setAttribute('download', fileName);
    const href = URL.createObjectURL(blobContent);
    aElement.href = href;
    aElement.setAttribute('target', '_blank');
    aElement.click();
    URL.revokeObjectURL(href);
}
document.querySelector(`input[type=button][discord-embed-group-id=${targetEmbedId}][id=import-embed]`).addEventListener('click', () =>
{
    document.querySelector(`input[type=file][discord-embed-group-id=${targetEmbedId}][id=import-embed-ghost]`).onchange = async (event) =>
    {
        if (event.target.files.length < 1)
        {
            alert('No files selected')
            return
        }
        let didParseFile = false
        for (let item of event.target.files)
        {
            if (item.name.endsWith('.json'))
            {
                try
                {
                    let text = await item.text()
                    let parsed = JSON.parse(text)
                    for (let item of Object.entries(parsed))
                    {
                        let key = item[0]
                        if (allowedDataKeys.includes(key))
                        {
                            document.querySelector(`[embed-id=${targetEmbedId}][embed-field=${key}]`).value = item[1]
                            console.debug(`Set [embed-id=${targetEmbedId}][embed-field=${key}] to `, item[1])
                        }
                        else
                        {
                            console.warn(`Invalid key '${key}' when parsing embed JSON for import. Ignoring`)
                        }
                    }
                    didParseFile = true
                }
                catch (e)
                {
                    alert(`Failed to read file! (check console)`)
                    console.error(`Failed to read/parse embed JSON`, e)
                }
            }
        }
        if (didParseFile)
            alert('Done!')
    }
    document.querySelector(`input[type=file][discord-embed-group-id=${targetEmbedId}][id=import-embed-ghost]`).click()
})
document.querySelector(`input[type=button][discord-embed-group-id=${targetEmbedId}][id=export-embed]`).addEventListener('click', () =>
{
    var resultData = {}
    for (var item of document.querySelectorAll(`[embed-id=${targetEmbedId}`))
    {
        const sourceItemField = item.attributes['embed-field'].value
        console.log(sourceItemField, item.value);
        if (allowedDataKeys.includes(sourceItemField))
        {
            resultData[sourceItemField] = item.value
        }
    }
    downloadFile(JSON.stringify(resultData, null, '    '), 'embed.json')
    alert('Exported!')
})
document.querySelectorAll(`[embed-id=${targetEmbedId}]`).forEach((si) => 
{
    const sourceItemField = si.attributes['embed-field'].value
    document.querySelectorAll(`[discord-embed-group-id=${targetEmbedId}][discord-embed-field=${sourceItemField}]`).forEach((vi) =>
    {
        const viewItem = vi
        const sourceItem = si
        function logic()
        {
            switch (sourceItemField)
            {
                case "title":
                case "footer-text":
                case "author-text":
                    viewItem.innerHTML = stringReplace(sourceItem.value, sourceItemField);
                    break;
                case "description":
                    viewItem.innerHTML = stringReplace(sourceItem.value, sourceItemField).replaceAll("\n", "<br>")
                    break;
                case "image":
                case "thumbnail":
                case "footer-img":
                case "author-img":
                    viewItem.src = sourceItem.value;
                    break;
            }
        }
        updateFunctionList.push(logic)
    })
})
document.querySelectorAll(`input[embed-id=${targetEmbedId}][type=color]`).forEach((si) => {
    const sourceItem = si
    function logic()
    {
        document.querySelectorAll(`.discord-embed-message[discord-embed-group-id=${targetEmbedId}]`).forEach((vi) => {
            vi.style.borderColor = sourceItem.value
        })
    }
    updateFunctionList.push(logic)
})
    
setInterval(() => {
    for (let f of updateFunctionList)
    {
        f()   
    }
}, 100)

</script>